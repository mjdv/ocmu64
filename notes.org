link: https://pacechallenge.org/2024/

* Lemmas
- If $c_{uv} = 0$, then we may assume $u\preceq v$.
- If all $B$ nodes have degree at most $2$, the average heuristic provides an
  **exact solution**.
- Set $L = \sum_{uv} \min(c_{uv}, c_{vu})$. Then $opt \leq 1.47\cdot  L$.
- We can split on /1$1$-layer cut vertex/: a vertex in $a\in A$ such that we can
  partition $B = B_1\cup B_2$ such that all neighbours of $B_1$ are left of $a$,
  and all neighbours of $B_2$ are right of $a$.
- If there are $k$ crossings, $|E| \leq |V|-1+k$.
- Precomputing $c_{uv}$ for non-trivial pairs can be done in $O(n+k)$ time when there are at most $k$
  crossings. fs

* Heuristics
- Average :: Sort by average nb positions (aka barycenter algorithm/heuristic)
  - $\sqrt(b)$-approximation.
  - Multiple times reported as better than median heuristic.
- Median :: Sort by median nb position
  - In even case, could use average of middle points, or the average over all points.
  - $3$-approximation.
  - For dense graphs, sorting by median is a $1+\epsilon$-approximation.
  - For $a=b=n$ and $cn^2$ edges, the approximation factor is $(3-c^2)/(1+c^2)+\epsilon$.
  - In practice, the average heuristic is sometimes slightly better for random graphs.
- Splitting (SP) :: Fix $u$. Partition all $v$ into $v\prec u$ and $u\prec v$ by
  minimizing $c_{uv}$ or $c_{vu}$. Recurse on partitions.
  - Can use a heuristic ordering as
- Greedy Swe :: Swap adjacent pairs as long as things improve.
- GRASP ::
  - Construction: Insert vertices one by one by decreasing degree (in partial subgraph).
  - Improvement: Move a vertex to its barycenter (average of nbs), or one position above or below.
- Tabu search :: Switches between three phases. Also does simulated annealing,
  allowing non-improving moves. Uses move-to-center and swapping adjacent
  positions. Also aggresively moves away from the optimum sometimes.

* LP
Here's a classic linear programming approach:
1. Solve the relaxed linear program.
2. Find redundant $3$-cycle constraints and remove them.
2. Find violated $3$-cycle constraints and add them.
3. Take a fractional variable, and set it to both $0$ and $1$.
4. Recurse on both options.

* FPT algoritms
** A first FPT: $\phi ^k$
[[file:papers/fpt.pdf]]
$\phi^k \cdot n^2$ fixed-parameter tractable branch and bound algorithm when at most $k$ crossings are allowed:
1. Start with the partial order of /suited/ pairs with $c_{uv}=0$ or $c_{vu}=0$.
2. Start with upper bound $B = k$.
3. Choose a random pair with $c_{uv}\neq c_{vu}$ and both $>0$ that is not yet
   ordered. Try both orderings, and take the transitive closure with the order
   decisions already made. Decrease $B$ by $c_{uv}$ or $c_{vu}$ and other newly
   added inefficiencies in the partial order.
4. The worst case is a Fibonacci tree with $\phi^k$ nodes.

** Improvements: $1.465^k$
[[file:papers/fpt-2.pdf]]
- Arbitrarily commit pairs with identical neighbours.
- Greedily commit pairs that would create $>k$ crossings otherwise.
- If $v$ is completely ordered with respect to all others, drop it and split the
  problem into two parts (one of which possibly empty).
- If $(u,v)$ are forced to be neighbours and completely ordered with respect to
  all others, order them greedily.
This results in an instance with $|A| \leq 3k^2$, $|B| \leq 3/2 \cdot k$, and
$|E| \leq 3k^2$.

It also improves the order in which decisions are made:
1. Branch on $c_{uv} + c_{vu}\geq 4$ if possible.
2. Else branch on a $2/1$ pattern.
3. Else commit a $1/1$ pattern.
4. Else return YES.

** Subexponential $O(k 2^{\sqrt{2k}} +n)$
[[file:papers/fpt-subexponential-2.pdf]]

Also runs in $2^c\cdot poly(n,c)$ for max cut-width $c$.

1. Build intervals $[l_b, r_b)$ for each $b\in B$ of the leftmost and rightmost
   neighbour of $b$ in $A$.
2. Go over $a\in A$ from left to right. Drop the $b$ with $r_b=a$ from the
   /active set/ $M$ (and add them to /left set/ $L$). Add the $b$ with $l_b=a$ to the
   active set $M$ (and remove them from /right set/ $R$).
3. For each $S\subseteq M$, keep track of the best partial solution on $L\cup S$
   using DP:
   - When dropping $b$, forget the $S$ not containing $B$ and remove $b$ from
     the $S$ that do contain it.
   - When adding $b$, Compute the score of $S$ containing $B$ using DP by
     partitioning on the last element of $S$:
     $$opt(L\cup S) = \min_{x\in S} opt(L\cup (S-x)) + c(L, x) + c(S-x, x)$$
     where $c(L, x)$ and $c(S-x, x)$ can be precomputed. Compute these in order
     of increasing size of $S$, so that $opt(L\cup (S-x))$ term will be
     computed before $opt(L\cup S)$.

* Ideas
- Slowly increase the upper bound for B&B, starting at an infeasible value. This
  may work well when time spent on impossible values is exponentially small.
- B&B both from the top and bottom (or possibly also from the middle?) so we can
  use larger partial lower bounds?
  - For example, most likely the points in the top thirds will just never occur
    in the bottom third and similar in reverse. So B&B good partial solutions
    for the top and bottom third and find good combinations of those.
- B&B on partial order of nodes. Binary choices are supposedly better and more elementary.
- B&B based on the subexponential FPT algorithm.
- Is B&B with memoization of tail lowerbounds the same as doing the DP? This is
  also similar to meet-in-the-middle B&B from both sides?
- Permute B nodes to be in roughly the right order in memory.
- Partition the problem on C-cuts.
  - Does this help when B&B already has memoization?
- DONE *Ordered*: If $r_u \leq l_v$.
- DONE *Twins*: Identify B nodes with identical nbs and merge them.
- DONE Merge adjacent 1-1 edges:
  When two adjacent vertices in A have degree 1, and their neighbours also have
  degree 1, these two 1-1 edges can be merged.
- DONE In the B&B, instead of appending the next vertex u, insert it optimally in the prefix.

- *Subgraph*: Given an interval $S_A$ of $A$. Let $S_B=\Gamma(S_A)$ be its set
  of neighbours. When $\Gamma(S_B) = S_A$, we can solve $S_B$ independently, add
  its cost to the global solution, and replace $S_A$ and $S_B$ by a single
  weighted edge.
  - *Tiny bridge* instance of this: when $u\in B$ is connected to $x,y$ adjacent
    in $A$, and $u,x,y$ don't have other edges.
- *LEMMA? Larger nbs:* When $u$ and $v$ in $B$, and $deg(u) = deg(v)$, and
  $\Gamma(u) \leq \Gamma(v)$, then does $u$ come before $v$?
  - $\Gamma(u)$ is the sorted list of neighbours of $u$, and $\Gamma(u)\leq
    \Gamma(v)$ means each nb of $u$ is $\leq$ the corresponding one of $v$.

- *Partial twins*: as soon as two vertices have the same nbs in /tail/, they
  should also be identified.

- *Siblings*: If for all $w$: If $v$ goes before $w$, than $u$ also, and if $u$ goes after
  $w$, than also $v$. I.e. $cvw < cwv$ implies $cuv \leq cwv$ and $cwu > cuw$ implies $cwu \geq cvw$.
  Then: $u$ most likely comes before $v$.
  - *This heuristic is super strong, but not true*

  - 32, 19, 28, 31, 33, 43, 23, 29, 50, 34, 20, 25
  - 31, 32, 33, 43, 23, 50, 34, 19, 20, 25, 28, 29

* Flags

- update_db_score: when score differs from stored score, overwrite instead of panic

** Safe
Flags named =no_...= disable features that should just work and not give contradictions.

- no_optimal_insert: disable optimal insert, which inserts new states in the
  optimal position in the already placed list.
- no_transform: disable graph simplifications (merging nodes / splitting components)
- no_split: disable splitting the graph in small parts
- no_dominating_pairs: disable =last(u) < first(v)= check
- no_strong_dominating_pairs: disable =u_i < v_i= check, allowing extra prefix/suffix.
- no_stronger_dominating_pairs: disable =u_i < v_{j*n/i}= check.

** Unsafe / broken
- siblings: if for every w, v<w => u<w, and u>w => v>w, and cuv < cvu, then u < v.
- strongest_dominating_pairs: if more than half of u comes before first(v).

** New
- boundary_pairs: fix vertices that only have green left/below them.
